<#
//*********************************************************
//
//   Last Updated: 1630 08 MAR 2011
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Data.Entity" #>
<#@ output extension=".cs"#>

<#
//***************************************************************
//***************** BEGIN Template Settings *********************
//***************************************************************

// This needs to be set to the .edmx file that you want to process.
string edmxFile = @"..\..\Blueapps.Data.Ef\Blueapps.edmx";

// the namespace name where the Domain Models (POCOs) live
string domainModelNamespace = @"Blueapps.Core.Domain";

// the namespace name where the Service Interfaces/Contracts live
string serviceInterfaceNamespace = @"Blueapps.Core.Services";

// answers the question: Force generation of file even if the code file exists?
bool forceCodeGeneration = false;

//***************************************************************
//***************** END Template Settings ***********************
//***************************************************************

this.Log(string.Format("Edmx File: {0}", edmxFile));
this.Log(string.Format("Domain Model namespace: {0}", domainModelNamespace));
this.Log(string.Format("Service Interface namespace: {0}", serviceInterfaceNamespace));

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

<#
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{		
	string fileName = string.Format("{0}Service.cs", entity.Name);
	
	AddToStructureMapBuffer(entity.Name + "Service");
	
	if(!DoesFileExist(fileName, forceCodeGeneration))	
	{
		fileManager.StartNewFile(this.LogFile(fileName));
		#>using System;
using System.Linq;
using System.Collections.Generic;
using <#= domainModelNamespace #>;
using <#= serviceInterfaceNamespace #>;
	
namespace <#= code.VsNamespaceSuggestion() #>
{	
    /// <summary>
    /// <#= code.Escape(entity) #>Service Implementation of I<#=code.Escape(entity)#>Service.
    /// </summary>
	public class <#=code.Escape(entity)#>Service : I<#=code.Escape(entity)#>Service
	{
	
	}
}<#
	}
	else
	{
		fileManager.StartNewFile(this.LogFile(fileName));
		this.Write(OutputFile(fileName));
	}	
}
#>
<# fileManager.StartNewFile(this.LogFile("ServicesRegistry.cs.txt")); #>
using System.Data.Objects;
using StructureMap.Configuration.DSL;
using <#= serviceInterfaceNamespace #>;

namespace <#= code.VsNamespaceSuggestion() #>
{
	public class ServicesRegistry : Registry
	{
		public ServicesRegistry()
		{
			// Services - StructureMap DI Registration
<# 
			foreach(var reg in this._structureMapRegistryBuffer){
#>
			<#= reg #>
<#				
			}
#>
		}
	}
}<#
fileManager.StartNewFile(GetStructureMapFileName());
#>
<#= this.WriteStructureMapRegistration() #>

<#
this.Log(Environment.NewLine);
fileManager.StartNewFile(GetLogFileName());
#>
<#= this.WriteLog() #>
<#	fileManager.Process(); #>

<#+
bool DoesFileExist(string filename, bool forceCodeGeneration)
{
	if(forceCodeGeneration) return false;
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

StringBuilder _logBuffer = new StringBuilder();
void Log(string message)
{
	_logBuffer.AppendFormat("- {0}", message);
	_logBuffer.AppendLine();
}

string LogFile(string fileName)
{
	Log(string.Format("Processed Code File: {0}", fileName));
	return fileName;
}

string WriteLog()
{
	return _logBuffer.ToString();	
}

string GetLogFileName()
{
	return string.Format("__Log.{0}", Path.GetFileName(Path.ChangeExtension(Host.TemplateFile, "txt")));
}

string GetStructureMapFileName()
{
	return string.Format("__StructureMap.{0}", Path.GetFileName(Path.ChangeExtension(Host.TemplateFile, "txt")));	
}

string WriteStructureMapRegistration()
{
	StringBuilder sb = new StringBuilder();
	sb.AppendLine("// Services - StructureMap DI Registration");
	foreach(var reg in _structureMapBuffer){
		sb.AppendLine(reg);
	}	
	return sb.ToString();
}

List<string> _structureMapBuffer = new List<string>();
List<string> _structureMapRegistryBuffer = new List<string>();
void AddToStructureMapBuffer(string entityName)
{
	_structureMapBuffer.Add(string.Format("x.For<I{0}>().Use<{0}>();", entityName));
	_structureMapRegistryBuffer.Add(string.Format("For<I{0}>().Use<{0}>();", entityName));
}
void AddToStructureMapBuffer(string interfaceName, string entityName)
{
	_structureMapBuffer.Add(string.Format("x.For<{0}>().Use<{1}>();", interfaceName, entityName));
	_structureMapRegistryBuffer.Add(string.Format("For<{0}>().Use<{1}>();", interfaceName, entityName));
}
void AddToStructureMapBufferNonGeneric(string interfaceName, string entityName)
{	
	_structureMapBuffer.Add(string.Format("x.For({0}).Use({1});", interfaceName, entityName));
	_structureMapRegistryBuffer.Add(string.Format("For({0}).Use({1});", interfaceName, entityName));
}
#>
