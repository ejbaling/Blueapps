//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace Blueapps.Core.Domain
{
    [MetadataType(typeof(Metadata))]
    public partial class aspnet_WebEvent_Events
    {
        #region Metadata
    
    	/// <summary>
    	/// Metadata internal class used for Data Annotations
    	/// </summary>
    	internal class Metadata
        {
            #region Primitive Properties
            
            [Display(Name = "Event Id")]
            [Required(ErrorMessage = "Event Id is Required.")]
            [StringLength(32, ErrorMessage = "Event Id must be under 32 characters.")]	
            public virtual string EventId { get; set; }	
            
            [Display(Name = "Event Time Utc")]
            [Required(ErrorMessage = "Event Time Utc is Required.")]	
            public virtual System.DateTime EventTimeUtc { get; set; }	
            
            [Display(Name = "Event Time")]
            [Required(ErrorMessage = "Event Time is Required.")]	
            public virtual System.DateTime EventTime { get; set; }	
            
            [Display(Name = "Event Type")]
            [Required(ErrorMessage = "Event Type is Required.")]
            [StringLength(256, ErrorMessage = "Event Type must be under 256 characters.")]	
            public virtual string EventType { get; set; }	
            
            [Display(Name = "Event Sequence")]
            [Required(ErrorMessage = "Event Sequence is Required.")]	
            public virtual decimal EventSequence { get; set; }	
            
            [Display(Name = "Event Occurrence")]
            [Required(ErrorMessage = "Event Occurrence is Required.")]	
            public virtual decimal EventOccurrence { get; set; }	
            
            [Display(Name = "Event Code")]
            [Required(ErrorMessage = "Event Code is Required.")]	
            public virtual int EventCode { get; set; }	
            
            [Display(Name = "Event Detail Code")]
            [Required(ErrorMessage = "Event Detail Code is Required.")]	
            public virtual int EventDetailCode { get; set; }	
            
            [Display(Name = "Message")]
            [StringLength(1024, ErrorMessage = "Message must be under 1024 characters.")]	
            public virtual string Message { get; set; }	
            
            [Display(Name = "Application Path")]
            [StringLength(256, ErrorMessage = "Application Path must be under 256 characters.")]	
            public virtual string ApplicationPath { get; set; }	
            
            [Display(Name = "Application Virtual Path")]
            [StringLength(256, ErrorMessage = "Application Virtual Path must be under 256 characters.")]	
            public virtual string ApplicationVirtualPath { get; set; }	
            
            [Display(Name = "Machine Name")]
            [Required(ErrorMessage = "Machine Name is Required.")]
            [StringLength(256, ErrorMessage = "Machine Name must be under 256 characters.")]	
            public virtual string MachineName { get; set; }	
            
            [Display(Name = "Request Url")]
            [StringLength(1024, ErrorMessage = "Request Url must be under 1024 characters.")]	
            public virtual string RequestUrl { get; set; }	
            
            [Display(Name = "Exception Type")]
            [StringLength(256, ErrorMessage = "Exception Type must be under 256 characters.")]	
            public virtual string ExceptionType { get; set; }	
            
            [Display(Name = "Details")]	
            public virtual string Details { get; set; }	

            #endregion
    
    
    	}

        #endregion
    }
}
